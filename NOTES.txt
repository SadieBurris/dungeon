- The action needs to be described. "You enter a blah blah blah room."

- Action may make changes to the state of the world (i.e. object states
  need to be updated.) no output.

- The results of the action may need to be described. (Things change, e.g.
  a monter dies or is wounded.)

- Things may take actions after the player's action (e.g. a monster may
  attack) which need to be described.

- The results of those actions need to be described. (Player's state may
  have changed or the state of Things, e.g. a monster's attack could smash
  an object which is now broken.)

Command:

Verb that invokes it.

How tokens are parsed.

Optional description of the action itself ("you swing your axe with great effort")

Changes it makes to the state of the world. Each change may optionally
generate a description of the change. ("you hit the monster in the neck
leaving a deep gash")

After each command the things in the room get a turn to potentially do
something which may generate other changes that may need to be described.

changes = action.perform()

on attacking pirate, the parrot flies to the ceiling.
on putting bread on the ground, parrot flies down to eat it.

Things listen for events they care about, things generate events. Also the
room generates events when the player enters or exits.




Listeners:

When the player takes an action, it may be of interest to other things. Maybe
only things in the same room but possibly things anywhere. And different things
may only care about different actions.

Simple event:

Player enters room.

  - Room decscribes itself.
  - Some monsters may attack as soon as the player enters.
  - A monster may run away.

Player attacks.

  - Monster may attack back
  - Other monsters (e.g. the pirate's parrot when the pirate is attacked) may take their own action.



Event bubbling:

Player -> Room -> Things in room -> Things in those things, etc.
